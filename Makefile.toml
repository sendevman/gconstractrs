[tasks.format-rust]
args = ["fmt"]
command = "cargo"
dependencies = ["install-rustfmt"]
description = "Format rust sources files."

[tasks.lint-rust-format]
args = ["fmt", "--all", "--", "--check"]
command = "cargo"
dependencies = ["install-rustfmt"]
description = "Check format of sources files."

[tasks.lint-rust]
args = [
  "clippy",
  "--workspace",
  "--locked",
  "--all-targets",
  "--",
  "-D",
  "clippy::all",
  "-D",
  "warnings",
]
command = "cargo"
dependencies = ["install-clippy"]
description = "Check lint of all sources files."

[tasks.lint-toml]
args = ["lint"]
command = "taplo"
dependencies = ["install-taplo-cli"]
description = "Check lint of all toml files."

[tasks.format-toml]
args = ["fmt"]
command = "taplo"
dependencies = ["install-taplo-cli"]
description = "Format toml file"

[tasks.lint]
dependencies = ["lint-rust-format", "lint-rust", "lint-toml"]

[tasks.format]
dependencies = ["format-rust", "format-toml"]

[tasks.clean]
args = ["clean"]
command = "cargo"

[tasks.build]
args = ["build", "--release", "--locked"]
command = "cargo"

[tasks.build-coverage]
args = ["build"]
command = "cargo"
description = "Compile the source code and create testable artifacts."
env = { RUSTFLAGS = "-Cinstrument-coverage" }

[tasks.test]
args = ["test", "--lib", "--tests", "--workspace", "--locked"]
command = "cargo"
dependencies = ["install-llvm-tools-preview", "build-coverage"]
description = "Run all unit tests."
env = { LLVM_PROFILE_FILE = "default.profraw", RUST_BACKTRACE = 1 }

[tasks.test-coverage]
dependencies = ["install-grcov", "test"]
script = '''
grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
'''

[tasks.install_wasm]
script = '''
rustup target add wasm32-unknown-unknown
'''

[tasks.wasm]
args = ["build", "--release", "--lib", "--target", "wasm32-unknown-unknown"]
command = "cargo"
dependencies = ["install_wasm"]
env = { RUSTFLAGS = "-C link-arg=-s" }

[tasks.schema]
workspace = true

[tasks.check_contracts]
dependencies = ["install-cosmwasm-check", "wasm"]
script = '''
cosmwasm-check ./target/wasm32-unknown-unknown/release/*.wasm
'''

[tasks.generate_docs]
dependencies = ["schema"]
script = '''
DOCS_FOLDER=docs
SCHEMA_FOLDER=schema
echo "🔎 Checking jsonschema2md installed..."
if ! which jsonschema2md >/dev/null;
then
    echo "\n❌   jsonschema2md could not be found"
    echo "  Consider installing jsonschema2md to generate documentation.\n"
    echo "＞ \`npm install -g @adobe/jsonschema2md\`\n\n"
    exit 1
fi

mkdir -p $SCHEMA_FOLDER
find contracts -type f -name '*.json' \
    -exec sh -c 'cp "$@" "$0"' $SCHEMA_FOLDER/ {} +

echo "📚 Generating documentation..."
rm -rf $DOCS_FOLDER
jsonschema2md -d schema -o $DOCS_FOLDER --schema-extension json --schema-out $DOCS_FOLDER/schema
echo "📖 Documentation has been successfully generated and available at $(pwd)/$DOCS_FOLDER/README.md"

rm -rf $SCHEMA_FOLDER
'''

[tasks.chain-clean]
script = '''
echo "️🧹Cleaning chain ${CHAIN} under ${CHAIN_HOME}"
rm -rf ${CHAIN_HOME}
'''

[tasks.chain-add-keys]
script = '''
keys=(
  "validator:${MNEMONIC_VALIDATOR}"
  "alice:${MNEMONIC_ALICE}"
  "bob:${MNEMONIC_BOB}"
  "charlie:${MNEMONIC_CHARLIE}"
 )
for entry in "${keys[@]}" ; do
    name="${entry%%:*}"
    key="${entry##*:}"
    echo "🗝️ Adding key ${name} for chain ${CHAIN}"
    echo "${key}" \
    | docker run --rm -i \
        -v `pwd`:/app \
        -w /app \
        ${DOCKER_IMAGE_COSMWASMD} wasmd \
          keys add ${name} \
            --recover \
            --keyring-backend ${KEYRING_BACKEND} \
            --home ${CHAIN_HOME}
done
'''

[tasks.chain-initialize]
dependencies = ["chain-clean", "chain-add-keys"]
script = '''
echo "🛠️ Initializing chain ${CHAIN} under ${CHAIN_HOME}"
docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_COSMWASMD} wasmd \
    init ${CHAIN_MONIKER} \
      --chain-id=${CHAIN} \
      --home ${CHAIN_HOME}
sed -i ${SED_FLAG} 's/"stake"/"uknow"/g' ${CHAIN_HOME}/config/genesis.json
sed -i ${SED_FLAG} 's/"time_iota_ms": "1000"/"time_iota_ms": "10"/' ${CHAIN_HOME}/config/genesis.json

docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_COSMWASMD} wasmd \
    add-genesis-account validator ${BALANCE_VALIDATOR} \
      --keyring-backend test \
      --home ${CHAIN_HOME}

balances=(
  "alice:${BALANCE_ALICE}"
  "bob:${BALANCE_BOB}"
  "charlie:${BALANCE_CHARLIE}"
 )
for entry in "${balances[@]}" ; do
    name="${entry%%:*}"
    balance="${entry##*:}"
    docker run --rm -i \
      -v `pwd`:/app \
      -w /app \
      ${DOCKER_IMAGE_COSMWASMD} wasmd \
         add-genesis-account ${name} "${balance}"  \
          --keyring-backend ${KEYRING_BACKEND} \
          --home ${CHAIN_HOME}
done

NODE_ID=$(
  docker run --rm \
    -v `pwd`:/app \
    -w /app \
    ${DOCKER_IMAGE_COSMWASMD} wasmd \
      tendermint show-node-id \
        --home ${CHAIN_HOME}
)
docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_COSMWASMD} wasmd \
    gentx validator 1000000uknow \
      --node-id ${NODE_ID} \
      --chain-id=${CHAIN} \
      --keyring-backend test \
      --home ${CHAIN_HOME}

docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_COSMWASMD} wasmd \
	  collect-gentxs \
	    --home ${CHAIN_HOME}
'''

[tasks.chain-start]
condition = { fail_message = "🚫 The chain is already running" }
condition_script = ["! docker ps -a | grep ${CHAIN} > /dev/null"]
script = '''
echo "🚀 Starting chain ${CHAIN} under ${CHAIN_HOME}"

if [ ! -f ${CHAIN_HOME}/config/genesis.json ]; then
  echo "⚠️ The chain seems to be uninitialised. Try: cargo make chain-initialize"
  exit 1
fi

docker run -d \
  -p ${CHAIN_RPC_PORT}:26657 \
  -p ${CHAIN_GRPC_PORT}:9090 \
  -v `pwd`:/app \
  -w /app \
  --name ${CHAIN} \
  ${DOCKER_IMAGE_COSMWASMD} wasmd \
    start \
      --moniker ${CHAIN} \
      --home ${CHAIN_HOME}
'''

[tasks.chain-stop]
condition = { fail_message = "🚫 The chain is not running" }
condition_script = ["docker ps -a | grep ${CHAIN} > /dev/null"]
script = '''
echo "🛑 Stopping chain ${CHAIN} under ${CHAIN_HOME}"
docker stop ${CHAIN}
docker rm ${CHAIN}
'''

[tasks.chain-logs]
condition = { fail_message = "🚫 The chain is not running" }
condition_script = ["docker ps -a | grep ${CHAIN} > /dev/null"]
script = '''
echo "📜 Logs for chain ${CHAIN} under ${CHAIN_HOME}:"
docker logs -f ${CHAIN}
'''

[tasks.install-llvm-tools-preview]
install_crate = { rustup_component_name = "llvm-tools-preview" }

[tasks.install-clippy]
install_crate = { rustup_component_name = "clippy" }

[tasks.install-rustfmt]
install_crate = { rustup_component_name = "rustfmt" }

[tasks.install-taplo-cli]
install_crate = { crate_name = "taplo-cli", binary = "taplo", test_arg = "--help" }

[tasks.install-grcov]
install_crate = { crate_name = "grcov" }

[tasks.install-cosmwasm-check]
install_crate = { crate_name = "cosmwasm-check" }

[config]
default_to_workspace = false
min_version = "0.36.3"

[env]
BALANCE_ALICE = "100000000000uknow"
BALANCE_BOB = "100000000000uknow"
BALANCE_CHARLIE = "100000000000uknow"
BALANCE_VALIDATOR = "1000000000uknow"
CHAIN = "wasmd-localnet"
CHAIN_HOME = "${DIR_DEPLOY}/${CHAIN}"
CHAIN_MONIKER = "local-node"
DIR_DEPLOY = "${DIR_TARGET}/deploy"
DIR_TARGET = "./target"
DOCKER_IMAGE_COSMWASMD = "cosmwasm/wasmd:v0.30.0"
KEYRING_BACKEND = "test"
MNEMONIC_ALICE = "code ceiling reduce repeat unfold intact cloud marriage nut remove illegal eternal pool frame mask rate buzz vintage pulp suggest loan faint snake spoon"
MNEMONIC_BOB = "add pig champion lounge initial tunnel oak panic drama float foot elegant coast manage diesel essence glory bicycle sniff upon horse crash damage bounce"
MNEMONIC_CHARLIE = "couple proud learn plunge neglect dice dry tail keen price tuition inherit ordinary portion abandon body kitten system word monitor lava quiz soup lift"
MNEMONIC_VALIDATOR = "island position immense mom cross enemy grab little deputy tray hungry detect state helmet tomorrow trap expect admit inhale present vault reveal scene atom"
SED_FLAG = { script = [
  '''if [ ${SHELL_NAME} = 'Darwin' ]; then echo "\'\'"; else echo; fi''',
] }
SHELL_NAME = { script = ["uname -s"] }
