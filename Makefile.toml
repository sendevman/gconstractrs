[tasks.format-rust]
args = ["fmt"]
command = "cargo"
description = "Format rust sources files."
install_crate = { rustup_component_name = "rustfmt" }

[tasks.lint-rust-format]
args = ["fmt", "--all", "--", "--check"]
command = "cargo"
description = "Check format of sources files."
install_crate = { rustup_component_name = "rustfmt" }

[tasks.lint-rust]
args = [
  "clippy",
  "--workspace",
  "--locked",
  "--all-targets",
  "--",
  "-D",
  "clippy::all",
  "-D",
  "warnings",
]
command = "cargo"
description = "Check lint of all sources files."
install_crate = { rustup_component_name = "clippy" }

[tasks.lint-toml]
args = ["lint"]
command = "taplo"
description = "Check lint of all toml files."
install_crate = { crate_name = "taplo-cli", binary = "taplo", test_arg = "--help" }

[tasks.format-toml]
args = ["fmt"]
command = "taplo"
description = "Format toml file"
install_crate = { crate_name = "taplo-cli", binary = "taplo", test_arg = "--help" }

[tasks.lint]
dependencies = ["lint-rust-format", "lint-rust", "lint-toml"]

[tasks.format]
dependencies = ["format-rust", "format-toml"]

[tasks.clean]
args = ["clean"]
command = "cargo"

[tasks.build]
args = ["build", "--release", "--locked"]
command = "cargo"

[tasks.build-coverage]
args = ["build"]
command = "cargo"
description = "Compile the source code and create testable artifacts."
env = { RUSTFLAGS = "-Cinstrument-coverage" }

[tasks.test]
args = ["test", "--lib", "--tests", "--workspace", "--locked"]
command = "cargo"
dependencies = ["build-coverage"]
description = "Run all unit tests."
env = { LLVM_PROFILE_FILE = "default.profraw", RUST_BACKTRACE = 1 }
install_crate = { rustup_component_name = "llvm-tools-preview" }

[tasks.test-coverage]
dependencies = ["test"]
install_crate = { crate_name = "grcov" }
script = '''
grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
'''

[tasks.install_wasm]
script = '''
rustup target add wasm32-unknown-unknown
'''

[tasks.wasm]
args = ["build", "--release", "--lib", "--target", "wasm32-unknown-unknown"]
command = "cargo"
dependencies = ["install_wasm"]
env = { RUSTFLAGS = "-C link-arg=-s" }

[tasks.schema]
workspace = true

[tasks.check_contracts]
dependencies = ["wasm"]
install_crate = { crate_name = "cosmwasm-check" }
script = '''
cosmwasm-check ./target/wasm32-unknown-unknown/release/*.wasm
'''

[tasks.generate_docs]
dependencies = ["schema"]
script = '''
DOCS_FOLDER=docs
SCHEMA_FOLDER=schema
echo "üîé Checking jsonschema2md installed..."
if ! which jsonschema2md >/dev/null;
then
    echo "\n‚ùå   jsonschema2md could not be found"
    echo "  Consider installing jsonschema2md to generate documentation.\n"
    echo "Ôºû \`npm install -g @adobe/jsonschema2md\`\n\n"
    exit 1
fi

mkdir -p $SCHEMA_FOLDER
find contracts -type f -name '*.json' \
    -exec sh -c 'cp "$@" "$0"' $SCHEMA_FOLDER/ {} +

echo "üìö Generating documentation..."
rm -rf $DOCS_FOLDER
jsonschema2md -d schema -o $DOCS_FOLDER --schema-extension json --schema-out $DOCS_FOLDER/schema
echo "üìñ Documentation has been successfully generated and available at $(pwd)/$DOCS_FOLDER/README.md"

rm -rf $SCHEMA_FOLDER
'''

[config]
default_to_workspace = false
