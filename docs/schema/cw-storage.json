{"contract_name":"cw-storage","contract_version":"0.1.0","idl_version":"1.0.0","instantiate":{"$schema":"http://json-schema.org/draft-07/schema#","title":"InstantiateMsg","description":"Instantiate messages","type":"object","required":["bucket","limits"],"properties":{"bucket":{"description":"The name of the bucket. The name could not be empty or contains whitespaces. If name contains whitespace, they will be removed.","type":"string"},"limits":{"description":"The limits of the bucket.","allOf":[{"$ref":"./cw-storage.json/#/definitions/BucketLimits"}]}},"additionalProperties":false,"definitions":{"BucketLimits":{"description":"BucketLimits is the type of the limits of a bucket.\n\nThe limits are optional and if not set, there is no limit.","type":"object","properties":{"max_object_pins":{"description":"The maximum number of pins in the bucket for an object.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"max_object_size":{"description":"The maximum size of the objects in the bucket.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"max_objects":{"description":"The maximum number of objects in the bucket.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"max_total_size":{"description":"The maximum total size of the objects in the bucket.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]}},"additionalProperties":false},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"execute":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ExecuteMsg","description":"Execute messages","oneOf":[{"title":"StoreObject","description":"StoreObject store an object to the bucket and make the sender the owner of the object. The object is referenced by the hash of its content and this value is returned. If the object is already stored, this is a no-op. If pin is true, the object is pinned for the sender.","type":"object","required":["store_object"],"properties":{"store_object":{"type":"object","required":["data","pin"],"properties":{"data":{"$ref":"./cw-storage.json/#/definitions/Binary"},"pin":{"type":"boolean"}},"additionalProperties":false}},"additionalProperties":false},{"title":"ForgetObject","description":"ForgetObject first unpin the object from the bucket for the considered sender, then remove it from the storage if it is not pinned anymore. If the object is pinned for other senders, it is not removed from the storage and an error is returned. If the object is not pinned for the sender, this is a no-op.","type":"object","required":["forget_object"],"properties":{"forget_object":{"type":"object","required":["id"],"properties":{"id":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"title":"PinObject","description":"PinObject pins the object in the bucket for the considered sender. If the object is already pinned for the sender, this is a no-op. While an object is pinned, it cannot be removed from the storage.","type":"object","required":["pin_object"],"properties":{"pin_object":{"type":"object","required":["id"],"properties":{"id":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"title":"UnpinObject","description":"UnpinObject unpins the object in the bucket for the considered sender. If the object is not pinned for the sender, this is a no-op. The object can be removed from the storage if it is not pinned anymore.","type":"object","required":["unpin_object"],"properties":{"unpin_object":{"type":"object","required":["id"],"properties":{"id":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}],"definitions":{"Binary":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string"}}},"query":{"$schema":"http://json-schema.org/draft-07/schema#","title":"QueryMsg","description":"Query messages","oneOf":[{"title":"Bucket","description":"Bucket returns the bucket information.","type":"object","required":["bucket"],"properties":{"bucket":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"title":"Object","description":"Object returns the object information with the given id.","type":"object","required":["object"],"properties":{"object":{"type":"object","required":["id"],"properties":{"id":{"description":"The id of the object to get.","type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"title":"Objects","description":"Objects returns the list of objects in the bucket with support for pagination.","type":"object","required":["objects"],"properties":{"objects":{"type":"object","properties":{"address":{"description":"The owner of the objects to get.","type":["string","null"]},"after":{"description":"The point in the sequence to start returning objects.","type":["string","null"]},"first":{"description":"The number of objects to return.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]}},"additionalProperties":false}},"additionalProperties":false},{"title":"ObjectData","description":"ObjectData returns the content of the object with the given id.","type":"object","required":["object_data"],"properties":{"object_data":{"type":"object","required":["id"],"properties":{"id":{"description":"The id of the object to get.","type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"title":"ObjectPins","description":"ObjectPins returns the list of addresses that pinned the object with the given id with support for pagination.","type":"object","required":["object_pins"],"properties":{"object_pins":{"type":"object","required":["id"],"properties":{"after":{"description":"The point in the sequence to start returning pins.","type":["string","null"]},"first":{"description":"The number of pins to return.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"id":{"description":"The id of the object to get the pins for.","type":"string"}},"additionalProperties":false}},"additionalProperties":false}],"definitions":{"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"migrate":null,"sudo":null,"responses":{"bucket":{"$schema":"http://json-schema.org/draft-07/schema#","title":"BucketResponse","description":"BucketResponse is the response of the Bucket query.","type":"object","required":["limits","name"],"properties":{"limits":{"description":"The limits of the bucket.","allOf":[{"$ref":"./cw-storage.json/#/definitions/BucketLimits"}]},"name":{"description":"The name of the bucket.","type":"string"}},"additionalProperties":false,"definitions":{"BucketLimits":{"description":"BucketLimits is the type of the limits of a bucket.\n\nThe limits are optional and if not set, there is no limit.","type":"object","properties":{"max_object_pins":{"description":"The maximum number of pins in the bucket for an object.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"max_object_size":{"description":"The maximum size of the objects in the bucket.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"max_objects":{"description":"The maximum number of objects in the bucket.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]},"max_total_size":{"description":"The maximum total size of the objects in the bucket.","anyOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"},{"type":"null"}]}},"additionalProperties":false},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"object":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ObjectResponse","description":"ObjectResponse is the response of the Object query.","type":"object","required":["id","is_pinned","owner","size"],"properties":{"id":{"description":"The id of the object.","type":"string"},"is_pinned":{"description":"Tells if the object is pinned by at least one address.","type":"boolean"},"owner":{"description":"The owner of the object.","type":"string"},"size":{"description":"The size of the object.","allOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"}]}},"additionalProperties":false,"definitions":{"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"object_data":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Binary","description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string"},"object_pins":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ObjectPinsResponse","description":"ObjectPinsResponse is the response of the GetObjectPins query.","type":"object","required":["data","page_info"],"properties":{"data":{"description":"The list of addresses that pinned the object.","type":"array","items":{"type":"string"}},"page_info":{"description":"The page information.","allOf":[{"$ref":"./cw-storage.json/#/definitions/PageInfo"}]}},"additionalProperties":false,"definitions":{"PageInfo":{"title":"PageInfo","description":"PageInfo is the page information returned for paginated queries.","type":"object","required":["end_cursor","has_next_page","has_previous_page","start_cursor"],"properties":{"end_cursor":{"description":"The cursor to the previous page.","type":"string"},"has_next_page":{"description":"Tells if there is a next page.","type":"boolean"},"has_previous_page":{"description":"Tells if there is a previous page.","type":"boolean"},"start_cursor":{"description":"The cursor to the next page.","type":"string"}},"additionalProperties":false}}},"objects":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ObjectsResponse","description":"ObjectsResponse is the response of the Objects query.","type":"object","required":["data","page_info"],"properties":{"data":{"description":"The list of objects in the bucket.","type":"array","items":{"$ref":"./cw-storage.json/#/definitions/ObjectResponse"}},"page_info":{"description":"The page information.","allOf":[{"$ref":"./cw-storage.json/#/definitions/PageInfo"}]}},"additionalProperties":false,"definitions":{"ObjectResponse":{"title":"ObjectResponse","description":"ObjectResponse is the response of the Object query.","type":"object","required":["id","is_pinned","owner","size"],"properties":{"id":{"description":"The id of the object.","type":"string"},"is_pinned":{"description":"Tells if the object is pinned by at least one address.","type":"boolean"},"owner":{"description":"The owner of the object.","type":"string"},"size":{"description":"The size of the object.","allOf":[{"$ref":"./cw-storage.json/#/definitions/Uint128"}]}},"additionalProperties":false},"PageInfo":{"title":"PageInfo","description":"PageInfo is the page information returned for paginated queries.","type":"object","required":["end_cursor","has_next_page","has_previous_page","start_cursor"],"properties":{"end_cursor":{"description":"The cursor to the previous page.","type":"string"},"has_next_page":{"description":"Tells if there is a next page.","type":"boolean"},"has_previous_page":{"description":"Tells if there is a previous page.","type":"boolean"},"start_cursor":{"description":"The cursor to the next page.","type":"string"}},"additionalProperties":false},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}}},"description":"# CW Storage\n\n## Overview\n\nThe `cw-storage` smart contract enables the storage of arbitrary `objects` in any [Cosmos blockchains](https://cosmos.network/) using the [CosmWasm](https://cosmwasm.com/) framework.\n\nThis contract allows for storing `objects`, pinning and unpinning `objects` for a given sender address, and it also includes the ability to remove (forget) `objects` if they are no longer pinned.","title":"cw-storage"}
