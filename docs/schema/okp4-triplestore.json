{"contract_name":"okp4-triplestore","contract_version":"1.0.0","idl_version":"1.0.0","instantiate":{"$schema":"http://json-schema.org/draft-07/schema#","title":"InstantiateMsg","description":"Instantiate message","type":"object","required":["limits"],"properties":{"limits":{"description":"Limitations regarding store usage.","allOf":[{"$ref":"./okp4-triplestore.json/#/definitions/StoreLimits"}]}},"additionalProperties":false,"definitions":{"StoreLimits":{"title":"StoreLimits","description":"Contains limitations regarding store usages.","type":"object","properties":{"max_triple_count":{"description":"The maximum number of triples the store can contains. If `None`, there is no limit on the number of triples.","anyOf":[{"$ref":"./okp4-triplestore.json/#/definitions/Uint128"},{"type":"null"}]}},"additionalProperties":false},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"execute":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ExecuteMsg","description":"Execute messages","oneOf":[{"title":"Insert","description":"Insert the Tuples extracted from the provided RDF graph. For already existing triples it act as no-op.\n\nOnly the smart contract owner (i.e. the address who instantiated it) is authorized to perform this action.","type":"object","required":["insert"],"properties":{"insert":{"type":"object","required":["input"],"properties":{"input":{"$ref":"./okp4-triplestore.json/#/definitions/GraphInput"}},"additionalProperties":false}},"additionalProperties":false},{"title":"Remove","description":"Remove all the Tuples linked to the resources matching the criteria defined in the provided queries.\n\nOnly the smart contract owner (i.e. the address who instantiated it) is authorized to perform this action.","type":"object","required":["remove"],"properties":{"remove":{"type":"object","required":["queries"],"properties":{"queries":{"description":"The queries act as the logical disjunction of each single query, a resource shall match at least one query.","type":"array","items":{"$ref":"./okp4-triplestore.json/#/definitions/ResourceQuery"}}},"additionalProperties":false}},"additionalProperties":false}],"definitions":{"Binary":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.","type":"string"},"GraphInput":{"title":"GraphInput","description":"Represents an RDF Graph as input supporting multiple formats.","oneOf":[{"description":"Input in [RDF/XML](https://www.w3.org/TR/rdf-syntax-grammar/) format.","type":"object","required":["x_m_l"],"properties":{"x_m_l":{"$ref":"./okp4-triplestore.json/#/definitions/Binary"}},"additionalProperties":false},{"description":"Input in [Turtle](https://www.w3.org/TR/turtle/) format with support of the [Turtle star](https://w3c.github.io/rdf-star/cg-spec/2021-12-17.html#turtle-star) syntax.","type":"object","required":["turtle"],"properties":{"turtle":{"$ref":"./okp4-triplestore.json/#/definitions/Binary"}},"additionalProperties":false},{"description":"Input in [N-Triples](https://www.w3.org/TR/n-triples/) format with support of the [N-Triples star](https://w3c.github.io/rdf-star/cg-spec/2021-12-17.html#n-triples-star) syntax.","type":"object","required":["n_triples"],"properties":{"n_triples":{"$ref":"./okp4-triplestore.json/#/definitions/Binary"}},"additionalProperties":false}]},"Literal":{"title":"Literal","description":"Literal represents the possible form an object literal value can have.","oneOf":[{"description":"A simple string literal value.","type":"object","required":["value"],"properties":{"value":{"type":"string"}},"additionalProperties":false},{"description":"An internationalized string value.","type":"object","required":["i18_n_value"],"properties":{"i18_n_value":{"type":"object","required":["language","value"],"properties":{"language":{"type":"string"},"value":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"A typed value.","type":"object","required":["typed"],"properties":{"typed":{"type":"object","required":["datatype","value"],"properties":{"datatype":{"type":"string"},"value":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}]},"ObjectValue":{"title":"ObjectValue","description":"Represents the different value an object can take.","oneOf":[{"description":"A literal value.","type":"object","required":["literal"],"properties":{"literal":{"$ref":"./okp4-triplestore.json/#/definitions/Literal"}},"additionalProperties":false},{"description":"A node to another resource.","type":"object","required":["node"],"properties":{"node":{"type":"string"}},"additionalProperties":false}]},"ResourceCriteria":{"title":"ResourceCriteria","description":"Represents a single query criteria on a resource.\n\nIt can rely on another query referencing it by its name to express conditions on links between resources (e.g. the `subject` of a resource shall be referenced in a resource of another query). It behaves as a right join, the resources of the referenced query aren't filtered.","oneOf":[{"description":"Subject match a resource containing the provided node as subject.","type":"object","required":["subject"],"properties":{"subject":{"type":"string"}},"additionalProperties":false},{"description":"Property match a resource matching the pair of (`predicate`, `object`).","type":"object","required":["property"],"properties":{"property":{"type":"object","required":["object","predicate"],"properties":{"object":{"description":"The object to match, which may be joined on another query.","allOf":[{"$ref":"./okp4-triplestore.json/#/definitions/ValueOrJoin_for_ObjectValue"}]},"predicate":{"description":"The predicate to match.","type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"Referenced match a resource whose `subject` is referenced in another resource.","type":"object","required":["referenced"],"properties":{"referenced":{"type":"object","required":["property","referer"],"properties":{"property":{"description":"The predicate through which the referencing resource shall express the reference.","type":"string"},"referer":{"description":"The `subject` the referencing resource shall have, which may be joined on another query.","allOf":[{"$ref":"./okp4-triplestore.json/#/definitions/ValueOrJoin_for_String"}]}},"additionalProperties":false}},"additionalProperties":false}]},"ResourceQuery":{"title":"ResourceQuery","description":"A named query targeting resources.\n\nAs the contained [ResourceCriteria] can rely on other [ResourceQuery] it is possible to build circular queries, which is forbidden and will result in an error.","type":"object","required":["criteria","name"],"properties":{"criteria":{"description":"The set of criteria a resource must meet to validate the query, it act as the logical conjunction of all the criteria.","type":"array","items":{"$ref":"./okp4-triplestore.json/#/definitions/ResourceCriteria"}},"name":{"description":"The query name, can be used to reference another query to allow join. Must be unique.","type":"string"}},"additionalProperties":false},"ValueOrJoin_for_ObjectValue":{"title":"ValueOrJoin","description":"Represents an expected value in a [ResourceCriteria], which can be either provided static value or a join on another [ResourceQuery].","oneOf":[{"description":"A static value.","type":"object","required":["value"],"properties":{"value":{"$ref":"./okp4-triplestore.json/#/definitions/ObjectValue"}},"additionalProperties":false},{"description":"A reference to another [ResourceQuery], identified by its name.","type":"object","required":["join_query"],"properties":{"join_query":{"type":"string"}},"additionalProperties":false}]},"ValueOrJoin_for_String":{"title":"ValueOrJoin","description":"Represents an expected value in a [ResourceCriteria], which can be either provided static value or a join on another [ResourceQuery].","oneOf":[{"description":"A static value.","type":"object","required":["value"],"properties":{"value":{"type":"string"}},"additionalProperties":false},{"description":"A reference to another [ResourceQuery], identified by its name.","type":"object","required":["join_query"],"properties":{"join_query":{"type":"string"}},"additionalProperties":false}]}}},"query":{"$schema":"http://json-schema.org/draft-07/schema#","title":"QueryMsg","description":"Query messages","oneOf":[{"title":"Resources","description":"Returns the resources matching the criteria defined in the provided queries formatted according to the provided format.","type":"object","required":["resources"],"properties":{"resources":{"type":"object","required":["format","queries"],"properties":{"format":{"description":"The expected output format. Its value shape the way the response shall be interpreted.","allOf":[{"$ref":"./okp4-triplestore.json/#/definitions/ResourcesOutputFormat"}]},"queries":{"description":"The queries act as the logical disjunction of each single query, a resource shall match at least one query.","type":"array","items":{"$ref":"./okp4-triplestore.json/#/definitions/ResourceQuery"}}},"additionalProperties":false}},"additionalProperties":false}],"definitions":{"Literal":{"title":"Literal","description":"Literal represents the possible form an object literal value can have.","oneOf":[{"description":"A simple string literal value.","type":"object","required":["value"],"properties":{"value":{"type":"string"}},"additionalProperties":false},{"description":"An internationalized string value.","type":"object","required":["i18_n_value"],"properties":{"i18_n_value":{"type":"object","required":["language","value"],"properties":{"language":{"type":"string"},"value":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"A typed value.","type":"object","required":["typed"],"properties":{"typed":{"type":"object","required":["datatype","value"],"properties":{"datatype":{"type":"string"},"value":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}]},"ObjectValue":{"title":"ObjectValue","description":"Represents the different value an object can take.","oneOf":[{"description":"A literal value.","type":"object","required":["literal"],"properties":{"literal":{"$ref":"./okp4-triplestore.json/#/definitions/Literal"}},"additionalProperties":false},{"description":"A node to another resource.","type":"object","required":["node"],"properties":{"node":{"type":"string"}},"additionalProperties":false}]},"ResourceCriteria":{"title":"ResourceCriteria","description":"Represents a single query criteria on a resource.\n\nIt can rely on another query referencing it by its name to express conditions on links between resources (e.g. the `subject` of a resource shall be referenced in a resource of another query). It behaves as a right join, the resources of the referenced query aren't filtered.","oneOf":[{"description":"Subject match a resource containing the provided node as subject.","type":"object","required":["subject"],"properties":{"subject":{"type":"string"}},"additionalProperties":false},{"description":"Property match a resource matching the pair of (`predicate`, `object`).","type":"object","required":["property"],"properties":{"property":{"type":"object","required":["object","predicate"],"properties":{"object":{"description":"The object to match, which may be joined on another query.","allOf":[{"$ref":"./okp4-triplestore.json/#/definitions/ValueOrJoin_for_ObjectValue"}]},"predicate":{"description":"The predicate to match.","type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"Referenced match a resource whose `subject` is referenced in another resource.","type":"object","required":["referenced"],"properties":{"referenced":{"type":"object","required":["property","referer"],"properties":{"property":{"description":"The predicate through which the referencing resource shall express the reference.","type":"string"},"referer":{"description":"The `subject` the referencing resource shall have, which may be joined on another query.","allOf":[{"$ref":"./okp4-triplestore.json/#/definitions/ValueOrJoin_for_String"}]}},"additionalProperties":false}},"additionalProperties":false}]},"ResourceQuery":{"title":"ResourceQuery","description":"A named query targeting resources.\n\nAs the contained [ResourceCriteria] can rely on other [ResourceQuery] it is possible to build circular queries, which is forbidden and will result in an error.","type":"object","required":["criteria","name"],"properties":{"criteria":{"description":"The set of criteria a resource must meet to validate the query, it act as the logical conjunction of all the criteria.","type":"array","items":{"$ref":"./okp4-triplestore.json/#/definitions/ResourceCriteria"}},"name":{"description":"The query name, can be used to reference another query to allow join. Must be unique.","type":"string"}},"additionalProperties":false},"ResourcesOutputFormat":{"title":"ResourcesOutputFormat","description":"Supported output formats for [QueryMsg::Resources] query.","oneOf":[{"description":"TODO: remove me once there are proper output formats..","type":"string","enum":["dummy"]}]},"ValueOrJoin_for_ObjectValue":{"title":"ValueOrJoin","description":"Represents an expected value in a [ResourceCriteria], which can be either provided static value or a join on another [ResourceQuery].","oneOf":[{"description":"A static value.","type":"object","required":["value"],"properties":{"value":{"$ref":"./okp4-triplestore.json/#/definitions/ObjectValue"}},"additionalProperties":false},{"description":"A reference to another [ResourceQuery], identified by its name.","type":"object","required":["join_query"],"properties":{"join_query":{"type":"string"}},"additionalProperties":false}]},"ValueOrJoin_for_String":{"title":"ValueOrJoin","description":"Represents an expected value in a [ResourceCriteria], which can be either provided static value or a join on another [ResourceQuery].","oneOf":[{"description":"A static value.","type":"object","required":["value"],"properties":{"value":{"type":"string"}},"additionalProperties":false},{"description":"A reference to another [ResourceQuery], identified by its name.","type":"object","required":["join_query"],"properties":{"join_query":{"type":"string"}},"additionalProperties":false}]}}},"migrate":null,"sudo":null,"responses":{"resources":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ResourcesResponse","description":"Response to the [QueryMsg::Resources] query, its content depends on the specified [ResourcesOutputFormat].","oneOf":[{"description":"TODO: remove me once there are proper output formats..","type":"string","enum":["dummy"]}]}},"description":"# Triplestore\n\n## Overview\n\nThe `okp4-triplestore` smart contract enables the storage of RDF graphs triples (i.e. `subject`-`predicate`-`object`) in any [Cosmos blockchains](https://cosmos.network/) using the [CosmWasm](https://cosmwasm.com/) framework.","title":"okp4-triplestore"}
